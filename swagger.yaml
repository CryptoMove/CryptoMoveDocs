swagger: "2.0"
info:
  description: "CryptoMove API"
  version: "1.2.0"
  title: "CryptoMove API"
basePath: "/v1"
host: api.cryptomove.com
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /user/secret/protect:
    post:
      description: >
        Stores a new secret. To create a new version of a secret,
        call this endpoint with an existing name and new value. The
        metadata object in the request body is optional. If excluded,
        the default metadata values are used. You can add custom key-value
        pairs in the metadata object. 
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: protect_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/ProtectRequestParameters"
      responses:
        200:
          description: "Succesfully updated parameters"
        400:
          description: "Could not update parameters"
        500:
          description: "Failed to lock user key"
  # /user/secret/protect_link:
  #   post:
  #     description: >
  #       Updates a shared secret. You must have write access to the secret.
  #     tags:
  #       - "secrets"
  #     # security:
  #     #   - APIKeyHeader: []
  #     parameters:
  #       - name: Authorization
  #         in: header
  #         type: string
  #         required: true
  #       - name: protectLink_parameters
  #         description: JSON parameters
  #         in: body
  #         schema:
  #           $ref: "#/definitions/ProtectLinkRequestParameters"
  #     responses:
  #       200:
  #         description: "Succesfully updated parameters"
  #       400:
  #         description: "Could not update parameters"
  #       500:
  #         description: "Failed to lock user key"
  /user/secret/expose:
    post:
      description: "Exposes the most recent value of a secret."
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: expose_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/ExposeRequestParameters"
      responses:
        200:
          description: "Succesfully updated parameters"
        400:
          description: "Could not update parameters"
        500:
          description: "Failed to restore user key"
  /user/secret/expose_link:
    post:
      description: >
        Exposes the most recent value of a shared secret.
        User must have read access to the secret.
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: exposeLink_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/ExposeLinkRequestParameters"
      responses:
        200:
          description: "Succesfully updated parameters"
        400:
          description: "Could not update parameters"
        500:
          description: "Failed to restore user key"
  /user/secret/version_expose:
    post:
      description: >
        Exposes the value of a specific version of a secret.
        To get a list of all versions, use /user/secret/version_list.
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: versionExpose_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/VersionExposeRequestParameters"
      responses:
        200:
          description: "Succesfully expose user key current version"
        400:
          description: "Could not expose user key current version"
        500:
          description: "Failed to get user key current version"
  /user/secret/version_expose_link:
    post:
      description: >
        Exposes the value of a specific version of a shared secret.
        User must have read access to the secret.
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: versionExposeLink_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/VersionExposeLinkRequestParameters"
      responses:
        200:
          description: "Succesfully expose user key current version"
        400:
          description: "Could not expose user key current version"
        500:
          description: "Failed to get user key current version"
  /user/secret/delete:
    post:
      description: >
        Deletes all versions of a secret. To delete
        only a specific version of the secret, use /user/secret/version_delete.
        Only the user who created a secret can delete it.
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: delete_parameters
          in: body
          description: JSON parameters
          schema:
            $ref: "#/definitions/DeleteRequestParameters"
      responses:
        200:
          description: "Succesfully deleted parameters"
        400:
          description: "Could not delete parameters"
        500:
          description: "Failed to delete user key"
  /user/secret/version_delete:
    post:
      description: >
        Deletes a specific version of a secret.
        Only the user who created a secret can delete it.
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: VersionDelete_parameters
          in: body
          description: JSON parameters
          schema:
            $ref: "#/definitions/VersionDeleteRequestParameters"
      responses:
        200:
          description: "Succesfully deleted parameters"
        400:
          description: "Could not delete parameters"
        500:
          description: "Failed to delete user key"
  /user/secret/share:
    post:
      description: >
        Gives another user access to a secret. Only the user who created
        the secret can share it with other users.
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: sharing_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/SharingRequestParameters"
      responses:
        200:
          description: "Succesfully shared a key to specified users"
        400:
          description: "Could not share a key to specified users"
        500:
          description: "Failed to share a key to specified users"
  # /user/secret/unshare:
  #   post:
  #     description: "Revokes a user's access to a secret."
  #     tags:
  #       - "secrets"
  #     # security:
  #     #   - APIKeyHeader: []
  #     parameters:
  #       - name: Authorization
  #         in: header
  #         type: string
  #         required: true
  #       - name: unshare_parameters
  #         description: JSON parameters
  #         in: body
  #         schema:
  #           $ref: "#/definitions/UnshareRequestParameters"
  #     responses:
  #       200:
  #         description: "Succesfully unshare_a_key"
  #       400:
  #         description: "Could not unshare_a_key"
  #       500:
  #         description: "Failed to unshare_a_key"
  /user/secret/update_description:
    post:
      description: "Update the description of a specifc version of a secret."
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: updateDescription_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/updateDescriptionRequestParameters"
      responses:
        200:
          description: "Succesfully updated description date"
        400:
          description: "Could not update description date"
        500:
          description: "Failed to update description date"
  /user/secret/update_classification:
    post:
      description: "Update the classification of a secret."
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: updateClassification_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/UpdateClassificationRequestParameters"
      responses:
        200:
          description: "Succesfully updated classification"
        400:
          description: "Could not update classification"
        500:
          description: "Failed to update classification"
  /user/secret/update_expiration:
    post:
      description: "Updates the expiration date of a specific version of a secret."
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: updateExpiration_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/UpdateExpirationRequestParameters"
      responses:
        200:
          description: "Succesfully updated expiration date"
        400:
          description: "Could not update expiration date"
        500:
          description: "Failed to update expiration date"
  /user/secret/list_no_dup:
    post:
      description: "Lists a user's secrets."
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: listNoDup_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/ListNoDupRequestParameters"
      responses:
        200:
          description: Returns a list of keys
          schema:
            $ref: "#/definitions/ListNoDupResponse"
        400:
          description: "Could not update parameters"
        500:
          description: "Failed to restore user secret"
  /user/secret/version_list:
    post:
      description: "Lists details about all versions of a secret."
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: versionList_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/VersionListRequestParameters"
      responses:
        200:
          description: "Succesfully list all versions of current key"
        400:
          description: "Could not list all versions of current key"
        500:
          description: "Failed to list all versions of user secret"
  /user/secret/version_list_for_link:
    post:
      description: >
        Lists information about all versions of a shared secret.
      tags:
        - "secrets"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
        - name: versionListLink_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/VersionListLinkRequestParameters"
      responses:
        200:
          description: "Succesfully list all versions of current key"
        400:
          description: "Could not list all versions of current key"
        500:
          description: "Failed to list all versions of user secret"
  /user/protect_file:
    post:
      description: >
        Uploads files for protection in the Tholos vault. Use the CountOfFiles
        parameter to upload multiple files in a single request.
      tags:
        - "files"
      consumes:
        - multipart/form-data
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: >
            Valid [access token](https://docs.cryptomove.com/docs/getting-started#section-authentication).
        - name: email
          in: header
          type: string
          required: true
          description: Email of the user who will own the file in Tholos.
        - name: CountOfFiles 
          in: header
          type: string
          required: true
          description: Number of files to be uploaded.
        - name: upfile
          in: formData
          type: file
          required: true
          description: File to upload to Tholos.
      responses:
        200:
          description: "success"
  /user/download_file:
    post:
      description: >
        Downloads a file from Tholos as an http octet-stream response.
        By default, the latest version of the file is downloaded. Use
        the version parameter to download a different version. If you 
        set the version parameter to 0, the latest version is downloaded. 
      tags:
        - "files"
      parameters: 
        - name: Authorization
          in: header
          type: string
          required: true
          description: >
            Valid [access token](https://docs.cryptomove.com/docs/getting-started#section-authentication).
        - name: downloadFile_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/DownloadFileRequestParameters"
      responses:
        200:
          description: "success"
  /user/list_file:
    post:
      description: Lists names and version numbers of the user's files currently in Tholos.
      tags:
        - "files"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: >
            Valid [access token](https://docs.cryptomove.com/docs/getting-started#section-authentication).
        - name: listFile_parameters
          description: JSON parameters
          in: body
          schema:
            type: object
            required: 
              - email
            properties:
              email:
                type: string
                description: Email of an authorized user.
      responses:
        200:
          description: "success"      
  /user/delete_file:
    post:
      description: >
        Deletes a specific version of a file or all versions of a file,
        depending on whether the version parameter is specified. To delete
        all of a user's files at once,
        use [delete_all_files](https://docs.cryptomove.com/reference#post_user-delete-all-files).
      tags:
        - "files"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: >
            Valid [access token](https://docs.cryptomove.com/docs/getting-started#section-authentication).
        - name: deleteFile_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/DeleteFileRequestParameters"
      responses:
        200:
          description: "success"                 
  /user/delete_all_files:
    post:
      description: >
        Deletes all of the user's files. 
        To delete a single file, use [delete_file](https://docs.cryptomove.com/reference#post_user-delete-file).
      tags:
        - "files"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: >
            Valid [access token](https://docs.cryptomove.com/docs/getting-started#section-authentication).
        - name: deleteAlFiles_parameters
          description: JSON parameters
          in: body
          schema:
            type: object
            required: 
              - email
            properties:
              email:
                type: string
                description: >
                  Email of an authorized user.
                  All of the user's files will be deleted.
      responses:
        200:
          description: "success"          
  /user/analytics:
    get:
      description: >
        Returns a report about a user's secrets and files in Tholos.
        The user is identified by the access token in the header.
      tags:
        - "analytics"
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: >
            Valid [access token](https://docs.cryptomove.com/docs/getting-started#section-authentication).
      responses:
        200:
          description: "success" 
  /user/signup:
    post:
      description: "Creates a new user."
      tags:
        - "auth"
      parameters:
        - name: signup_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/SignupRequestParameters"
      responses:
        200:
          description: "registration succeeded"
        400:
          description: "error"
  /user/secret/logout:
    post:
      description: "Logs the user out of the system."
      tags:
        - "auth"
      parameters:
        - name: logout_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/LogoutRequestParameters"
      responses:
         200:
           description: "success"
  /user/resetpassword:
    post:
      description: "Resets a user's password."
      tags:
        - "auth"
      parameters:
        - name: resetpassword_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/ResetpasswordRequestParameters"
      responses:
        200:
          description: "We've just sent you an email to reset your password."
        400:
          description: "error"
  /user/refresh_token:
    post:
      description: >
        Acquires a new access token by passing a refresh token in the
        body of the request. For details on obtaining a refresh token,
        see [Authentication](https://docs.cryptomove.com/docs/getting-started#section-authentication).
      tags:
        - "auth"
      parameters:
        - name: refreshtoken_parameters
          description: JSON parameters
          in: body
          schema:
            $ref: "#/definitions/RefreshTokenParameters"
      responses:
        200:
          description: "refresh token successful"
        400:
          description: "error"


  # /user/login_authorization_code:
  #   post:
  #     description: "User login"
  #     tags:
  #       - "auth"
  #     responses:
  #       200:
  #         description: "logged in"
  #       400:
  #         description: "error"
  # /user/authorization_code_email:
  #   post:
  #     description: "User login"
  #     tags:
  #       - "auth"
  #     responses:
  #       200:
  #         description: "get authorization code by email"
  #       400:
  #         description: "error"
  # /user/secret/update_key_metadata:
  #   post:
  #     description: "Update user key metadata for authorized request"
  #     tags:
  #       - "secrets"
  #     responses:
  #       200:
  #         description: "Succesfully update user metadata versions of current key"
  #       400:
  #         description: "Failed to update user key metadata"
  #       500:
  #         description: "Failed to update user key metadata"
  # /user/secret/update_user_metadata:
  #     post:
  #       description: "Update user metadata for authorized request"
  #       tags:
  #         - "secrets"
  #       responses:
  #         200:
  #           description: "Succesfully update user metadata versions of current key"
  #         400:
  #           description: "Failed to update user  metadata"
  #         500:
  #           description: "Failed to update user  metadata"
  # /user/secret/user_metadata:
  #     post:
  #       description: "Get user metadata for authorized request"
  #       tags:
  #         - "secrets"
  #       responses:
  #         200:
  #           description: "Succesfully get user metadata versions of current key"
  #         400:
  #           description: "Failed to get user metadata"
  #         500:
  #           description: "Failed to get user metadata"
  # /user/server/betacode:
  #   post:
  #     description: "Verify beta code"
  #     tags:
  #       - "auth"
  #     responses:
  #       200:
  #         description: "Information regarding user beta code"
  #       400:
  #         description: "Could not find beta code"
definitions:
  ProtectionGroup:
    type: "object"
    properties:
      protection_setting:
        type: "string"
        description: "Provides the following options:
          * Low: 2 copies, 4 parts, 1 move/day
          * Medium: 3 copies, 8 parts, 12 move/day
          * High: 4 copies, 16 parts, 24 move/day"
        enum:
          - "low"
          - "medium"
          - "high"
  LogoutRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of the user who will be logged out."
  DeleteRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of an authorized user."
      key_name:
        type: string
        description: "Name of the secret."
  VersionDeleteRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: Email of an authorized user.
      key_name:
        type: string
        description: Name of the secret.
      key_version:
        type: string
        description: Version of the secret that you want to delete.
  ResetpasswordRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of user."
      connection:
        type: string
        description: "Name of the CryptoMove Tholos database."
  SignupRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of the new user."
      password:
        type: string
        description: "Password of the new user."
      beta_code:
        type: string
        description: "Identifier for beta version of CryptoMove Tholos."
  ProtectRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of an authorized user."
      key_name:
        type: string
        description: "Name of the new secret."
      key_value:
        type: string
        description: "Value of the new secret."
      without_list:
        type: integer
        description: >
          Setting this parameter to 1 prevents the response from listing
          all of the user's existing secrets. Optional.
      metadata:
        type: object
        properties:
          application_type:
            type: string
            description: Optional. Defaults to "container".
          classification:
            type: string
            description: >
              Classification of the new secret. Optional. Defaults to "top".
          cloud_type:
            type: string
            description: Optional. Defaults to "aws".
          description:
            type: string
            description: Description of the new secret. Optional.
          environment_type:
            type: string
            description: Optional. Defaults to "dev".
          expiration_time:
            type: integer
            description: Number of days until the secret expires. Optional. Defaults to 10 days.
      
  ProtectLinkRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of a user with write access to the shared secret."
      key_name:
        type: string
        description: "Link name of the shared secret."
      key_value:
        type: string
        description: "New value of the shared secret."
      classification:
        type: string
        description: Updated classification of the shared secret. Accepts any string. Optional.
      description:
        type: string
        description: New description of the shared secret. Optional.
      expiration_time:
        type: integer
        description: Number of days until the shared secret expires. Optional. Defaults to 10 days.
  ExposeRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of an authorized user."
      key_name:
        type: string
        description: "Name of the secret."
  ExposeLinkRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of a user with read access to the shared secret."
      key_name:
        type: string
        description: "Link name of the shared secret."
  SharingRequestParameters:
    type: object
    properties:
      key_name:
        type: string
        description: Name of the secret.
      permission:
        type: string
        description: >
          Permissions to be granted to user.
          Write (W), Read (R), or both (RW).
        enum:
          - R
          - W
          - RW
      usr_id_from:
        type: string
        description: >
          Email of the user who is sharing the secret.
          Must be the user who created the secret.
      usr_id_to:
        type: string
        description: Email of the user who will have shared access to the secret.
      email:
        type: string
        description: >
          Email of the user who created the secret.
          Same value as usr_id_from
  UnshareRequestParameters:
    type: object
    properties:
      usr_id_from:
        type: string
        description: "Email of user who will no longer have access to the secret."
      key_name:
        type: string
        description: "Name of the secret."
  VersionExposeRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of an authorized user."
      key_name:
        type: string
        description: "Name of the secret."
      key_version:
        type: string
        description: "A version number of the secret."
  VersionExposeLinkRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of a user with read access to the shared secret."
      key_name:
        type: string
        description: "Link name of the shared secret."
      key_version:
        type: string
        description: "A version number of the shared secret."
  ListRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of user with access to secrets."
  ListNoDupRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of user with access to secrets."
  VersionListRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of an authorized user."
      key_name:
        type: string
        description: "Name of the secret."
  VersionListLinkRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: "Email of a user with read access to the shared secret."
      key_name:
        type: string
        description: "Link name of the shared secret."
  UpdateClassificationRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: Email of an authorized user.
      key_name:
        type: string
        description: Name of the secret.
      classification:
        type: string
        description: New classification of the secret.
  UpdateExpirationRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: Email of an authorized user.
      key_name:
        type: string
        description: Name of the secret.
      key_version:
        type: string
        description: A version of the secret.
      expiration_time:
        type: integer
        description: The number of days before the version of the secret will expire.
  updateDescriptionRequestParameters:
    type: object
    properties:
      email:
        type: string
        description: Email of an authorized user.
      key_name:
        type: string
        description: Name of the secret.
      description:
        type: string
        description: New description of the secret.
      key_version:
        type: string
        description: A version of the secret.
  DownloadFileRequestParameters:
    type: object
    required:
      - email
      - filename
    properties:
      email: 
        type: string
        description: Email of an authorized user.
      filename: 
        type: string
        description: Name of the file that you want to download.
      version:
        type: integer
        description: >
          If specified, downloads a particular version of the file.
          Without this parameter (or if "version":0), the latest version is downloaded.
  DeleteFileRequestParameters:
    type: object
    required:
      - email
      - filename
    properties:
      email: 
        type: string
        description: Email of an authorized user.
      filename: 
        type: string
        description: Name of the file you want to delete.
      version: 
        type: integer
        description: >
          If specified, deletes a particular version of the fie.
          Without this parameter (or if "version":0), all versions of the file are deleted.
  RefreshTokenParameters:
    type: object
    properties:
      refresh_token:
        type: string
        description: Valid refresh token.
  ListNoDupResponse:
    type: object
    properties:
      keys:
        description: Secrets created by the user
        type: object
        properties:
          keyName:
            type: string
            description: Unique secret name
      links:
        description: Secrets shared to or from the user
        type: object
        properties:
          keyName:
            type: string
            description: Unique secret name
      status:
        description: Status from the server
        type: string
